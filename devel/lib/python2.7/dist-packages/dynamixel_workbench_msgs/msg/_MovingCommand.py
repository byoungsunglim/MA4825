# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamixel_workbench_msgs/MovingCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MovingCommand(genpy.Message):
  _md5sum = "e2c23716abf0bc165dec8a781d95100b"
  _type = "dynamixel_workbench_msgs/MovingCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message is used to send position command to dynamixel

uint8 id
float32 goal_position
float32 speed
bool to_send_command

"""
  __slots__ = ['id','goal_position','speed','to_send_command']
  _slot_types = ['uint8','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,goal_position,speed,to_send_command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MovingCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.goal_position is None:
        self.goal_position = 0.
      if self.speed is None:
        self.speed = 0.
      if self.to_send_command is None:
        self.to_send_command = False
    else:
      self.id = 0
      self.goal_position = 0.
      self.speed = 0.
      self.to_send_command = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2fB().pack(_x.id, _x.goal_position, _x.speed, _x.to_send_command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.goal_position, _x.speed, _x.to_send_command,) = _get_struct_B2fB().unpack(str[start:end])
      self.to_send_command = bool(self.to_send_command)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2fB().pack(_x.id, _x.goal_position, _x.speed, _x.to_send_command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.goal_position, _x.speed, _x.to_send_command,) = _get_struct_B2fB().unpack(str[start:end])
      self.to_send_command = bool(self.to_send_command)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2fB = None
def _get_struct_B2fB():
    global _struct_B2fB
    if _struct_B2fB is None:
        _struct_B2fB = struct.Struct("<B2fB")
    return _struct_B2fB
